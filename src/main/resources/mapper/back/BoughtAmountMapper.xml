<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.slabs.exchange.mapper.back.BoughtAmountMapper">
  <resultMap id="BaseResultMap" type="com.slabs.exchange.model.entity.BoughtAmount">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="coin_id" jdbcType="INTEGER" property="coinId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="withdraw" jdbcType="INTEGER" property="withdraw" />
    <result column="coin_amount" jdbcType="NUMERIC" property="coinAmount" />
    <result column="hos_amount" jdbcType="NUMERIC" property="hosAmount" />
    <result column="symbol_id" jdbcType="INTEGER" property="symbolId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, project_id, coin_id, create_time, order_id, withdraw, coin_amount, hos_amount, 
    symbol_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bought_amount
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bought_amount
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.slabs.exchange.model.entity.BoughtAmount">
    insert into bought_amount (id, user_id, project_id, 
      coin_id, create_time, order_id, 
      withdraw, coin_amount, hos_amount, 
      symbol_id)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER}, 
      #{coinId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{orderId,jdbcType=VARCHAR}, 
      #{withdraw,jdbcType=INTEGER}, #{coinAmount,jdbcType=NUMERIC}, #{hosAmount,jdbcType=NUMERIC}, 
      #{symbolId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.slabs.exchange.model.entity.BoughtAmount">
    insert into bought_amount
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="coinId != null">
        coin_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="withdraw != null">
        withdraw,
      </if>
      <if test="coinAmount != null">
        coin_amount,
      </if>
      <if test="hosAmount != null">
        hos_amount,
      </if>
      <if test="symbolId != null">
        symbol_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null">
        #{coinId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="withdraw != null">
        #{withdraw,jdbcType=INTEGER},
      </if>
      <if test="coinAmount != null">
        #{coinAmount,jdbcType=NUMERIC},
      </if>
      <if test="hosAmount != null">
        #{hosAmount,jdbcType=NUMERIC},
      </if>
      <if test="symbolId != null">
        #{symbolId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.slabs.exchange.model.entity.BoughtAmount">
    update bought_amount
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null">
        coin_id = #{coinId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="withdraw != null">
        withdraw = #{withdraw,jdbcType=INTEGER},
      </if>
      <if test="coinAmount != null">
        coin_amount = #{coinAmount,jdbcType=NUMERIC},
      </if>
      <if test="hosAmount != null">
        hos_amount = #{hosAmount,jdbcType=NUMERIC},
      </if>
      <if test="symbolId != null">
        symbol_id = #{symbolId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.slabs.exchange.model.entity.BoughtAmount">
    update bought_amount
    set user_id = #{userId,jdbcType=INTEGER},
      project_id = #{projectId,jdbcType=INTEGER},
      coin_id = #{coinId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      order_id = #{orderId,jdbcType=VARCHAR},
      withdraw = #{withdraw,jdbcType=INTEGER},
      coin_amount = #{coinAmount,jdbcType=NUMERIC},
      hos_amount = #{hosAmount,jdbcType=NUMERIC},
      symbol_id = #{symbolId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateWithdrawByProjectId" parameterType="int">
    update bought_amount set withdraw = #{status, jdbcType=INTEGER} where project_id = #{projectId,jdbcType=INTEGER}
  </update>

  <select id="getWithdrawsByNum" resultMap="BaseResultMap">
    select * from bought_amount where withdraw = #{status,jdbcType=INTEGER}
    limit #{num,jdbcType=INTEGER}
  </select>

  <update id="updateWithdrawStatusByOrderId" parameterType="java.util.List">
    <foreach collection="list" item="orderId" index="index" open="" close=";" separator=";">
      update bought_amount set
      withdraw = 3
      where order_id = #{orderId,jdbcType=VARCHAR}
    </foreach>
  </update>
</mapper>