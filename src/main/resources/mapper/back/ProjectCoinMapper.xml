<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.slabs.exchange.mapper.back.ProjectCoinMapper">
  <resultMap id="BaseResultMap" type="com.slabs.exchange.model.entity.ProjectCoin">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="amount" jdbcType="NUMERIC" property="amount" />
    <result column="contract_addr" jdbcType="VARCHAR" property="contractAddr" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="coin_id" jdbcType="INTEGER" property="coinId" />
    <result column="coin_type" jdbcType="VARCHAR" property="coinType" />
  </resultMap>
  <sql id="Base_Column_List">
    id, amount, contract_addr, user_id, coin_id, coin_type
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from project_coin
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from project_coin
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.slabs.exchange.model.entity.ProjectCoin">
    insert into project_coin (amount, contract_addr,
      user_id, coin_id, coin_type
      )
    values (#{amount,jdbcType=NUMERIC}, #{contractAddr,jdbcType=VARCHAR},
      #{userId,jdbcType=INTEGER}, #{coinId,jdbcType=INTEGER}, #{coinType,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.slabs.exchange.model.entity.ProjectCoin">
    insert into project_coin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="contractAddr != null">
        contract_addr,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="coinId != null">
        coin_id,
      </if>
      <if test="coinType != null">
        coin_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=NUMERIC},
      </if>
      <if test="contractAddr != null">
        #{contractAddr,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null">
        #{coinId,jdbcType=INTEGER},
      </if>
      <if test="coinType != null">
        #{coinType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.slabs.exchange.model.entity.ProjectCoin">
    update project_coin
    <set>
      <if test="amount != null">
        amount = #{amount,jdbcType=NUMERIC},
      </if>
      <if test="contractAddr != null">
        contract_addr = #{contractAddr,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="coinId != null">
        coin_id = #{coinId,jdbcType=INTEGER},
      </if>
      <if test="coinType != null">
        coin_type = #{coinType,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.slabs.exchange.model.entity.ProjectCoin">
    update project_coin
    set amount = #{amount,jdbcType=NUMERIC},
      contract_addr = #{contractAddr,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      coin_id = #{coinId,jdbcType=INTEGER},
      coin_type = #{coinType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>